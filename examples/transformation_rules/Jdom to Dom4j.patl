//84 rules ( including 12 m-to-m rules )

//Element:
( x : Element -> Element, y : String -> String ) {
    - x = new Element(y);
    + x = DocumentHelper.createElement(y);
}

( x : Element -> Element, y : String -> String, z : Namespace -> Namespace ) {
    - x = new Element(y, z);
    + x = DocumentHelper.createElement(new QName(y, z));
}

( x : Element -> Element, y : Element -> Element, z : String -> String )
{
    - y = x.addContent(z);
    + y = x.addText(z);
}

( x : Element -> Element, y : Element -> Element, z : Content -> Node )
{
    - y = x.addContent(z);
    + y = x.add(z);
}

( obj : Element -> Element, res : Element -> Element, content : Content -> Node, 
    pos : int -> int )
{
    - res = obj.addContent(pos, content);
    + List<Node> list = obj.content();
    + list.add(pos, content);
}

( obj : Element -> Element, res : List<Content> -> List<Node> )
{
    - res = obj.getContent();
    + res = obj.content();
}

( obj : Element -> Element, res : List<Element> -> List<Element>, 
    localName : String -> String, namespace : Namespace -> Namespace )
{
    - res = obj.getChildren( void | localName | localName, namespace );
    + res = obj.elements( void | localName | new QName(localName, namespace) );
}

( obj : Element -> Element, res : List<Element> -> List<Element>, name : String -> String,
    ns : Namespace -> Namespace )
{
    - res = obj.getChild( name | name, ns );
    + res = obj.element( name | new QName(name, ns) );
}

( obj : Element -> Element, res : String -> String, 
    name : String -> String, def : String -> String, ns : Namespace -> Namespace )
{
    - res = obj.getAttributeValue(name | name, def | name, ns | name, ns, def);
    + res = obj.attributeValue(name | name, def | new QName(name, ns) | new QName(name, ns), def);
}

( obj : Element -> Element, res : Attribute -> Attribute, name : String -> String,
    ns : Namespace -> Namespace )
{
    - res = obj.getAttribute( name | name, ns );
    + res = obj.attribute( name | new QName(name, ns) );
}

( obj : Element -> Element, res : List<Attribute> -> List<Attribute> )
{
    - res = obj.getAttributes();
    + res = obj.attributes();
}

( obj : Element -> Element, res : String -> String, name : String -> String,
    ns : Namespace -> Namespace )
{
    - res = obj.getChildText( name | name, ns );
    + res = obj.elementText( name | new QName(name, ns) );
}

( obj : Element -> Element, res : String -> String, name : String -> String,
    ns : Namespace -> Namespace )
{
    - res = obj.getChildTextTrim( name | name, ns );
    + res = obj.elementTextTrim( name | new QName(name, ns) );
}

( obj : Element ->  Element, res : Element -> Element )
{
    - res = obj.getParentElement();
    + res = obj.getParent();
}

( obj : Element -> Element, res : Namespace -> Namespace )
{
    - res = obj.getNamespace();
    + res = obj.getNamespace();
}

( obj : Element -> Element, res : String -> String )
{
    - res = obj.getNamespacePrefix();
    + res = obj.getNamespacePrefix();
}

( obj : Element -> Element, res : Namespace -> Namespace, pre : String -> String )
{
    - res = obj.getNamespace( pre );
    + res = obj.getNamespaceForPrefix( pre );
}

( obj : Element -> Element, text : String -> String )
{
    - obj.setText(text);
    + obj.setText(text);
}

( obj : Element -> Element, name : String -> String )
{
    - obj.setName(name);
    + obj.setName(name);
}

( obj : Element -> Element, ns : Namespace -> Namespace )
{
    - obj.setNamespace(ns);
    + obj.setQName(new QName(obj.getName(), ns));
}

( obj : Element -> Element, name : String ->  String, value : String -> String,
    attr : Attribute -> Attribute, ns : Namespace -> Namespace )
{
    - obj.setAttribute( name, value | attr | name, value, ns );
    + obj.addAttribute( name, value | attr.getName(), attr.getValue() | new QName(name, ns), value );
}

( obj : Element -> Element, res : String -> String )
{
    - res = obj.getValue();
    + res = obj.getStringValue();
}

( obj : Element -> Element, res : boolean -> Element, ns : Namespace -> Namespace )
{
    - res = obj.addNamespaceDeclaration(ns);
    + res = obj.addNamespace(ns.getPrefix(), ns.getURI());
}

( obj : Element -> Element, res : int -> int, para : Content -> Node )
{
    - res = obj.indexOf(para);
    + res = obj.indexOf(para);
}

( obj : Element -> Element, res : boolean -> boolean, content : Content -> Node )
{
    - res = obj.removeContent(content);
    + res = obj.remove(content);
} // dom4j : remove( Element | Text | Attribute | Comment | Node ) can be transformed by this rule

( obj : Element -> Element, res : Element -> Element )
{
    - res = obj.detach();
    + res = obj.detach();
}

( obj : Element -> Element, res : Element -> Element )
{
    - res = obj.clone();
    + res = obj.createCopy();
}

( obj : Element -> Element, res : List<Content> -> List<Node> )
{
    - res = obj.cloneContent();
    + Element e = obj.createCopy();
    + res = obj.content();
}

//Document:
( res : Document -> Document )
{
    - res = new Document();
    + res = DocumentHelper.createDocument();
}

( obj : Document -> Document, res : Element -> Element )
{
    - res = obj.getRootElement();
    + res = obj.getRootElement();
}

( obj : Document -> Document, ele : Element -> Element )
{
    - obj.setRootElement(ele);
    + obj.setRootElement(ele);
}

( obj : Document -> Document, res : String -> String )
{
    - res = obj.getName();
    + res = obj.getName();
}

( obj : Document -> Document, res : String -> String )
{
    - res = obj.getText();
    + res = obj.getText();
}

( obj : Document -> Document, res : Document -> Document, content : Content -> Node)
{
    - res = obj.addContent(content);
    + res = obj.add(content);
}

( obj : Document -> Document, res : Document -> Document, content : Content -> Node, 
    pos : int -> int )
{
    - res = obj.addContent(pos, content);
    + List<Node> list = obj.content();
    + list.add(pos, content);
}

//Attribute:
( res : Attribute -> Attribute,  name : String -> String, value : String -> String, 
    ns : Namespace -> Namespace )
{
    - res = new Attribute( name, value | name, value, ns );
    + res = DocumentHelper.createAttribute( null, name, value | null, new QName(name, ns), value );
}

//SAXBuilder <-> SAXReader:
( res : SAXBuilder -> SAXReader )
{
    - res = new SAXBuilder();
    + res = new SAXReader();
}

( obj : SAXBuilder -> SAXReader, res : Document -> Document, rd : Reader -> Reader,
    f : File -> File )
{
    - res = obj.build( rd | f );
    + res = obj.read( rd | f );
}

//DOMBuilder <-> DOMReader
( res : DOMBuilder-> DOMReader)
{
    - res = new DOMBuilder();
    + res = new DOMReader();
}

( obj : DOMBuilder -> DOMReader, res : Document -> Document, doc : Document -> Document )
{
    - res = obj.build( doc );
    + res = obj.read( doc );
}

//Format <-> OutputFormat
( res : Format -> OutputFormat ) 
{
    - res = Format.getPrettyFormat() | getCompactFormat() | getRawFormat();
    + res = OutputFormat.createPrettyFormat() | createCompactFormat() | new OutputFormat();
}

( obj : Format -> OutputFormat, cd : String -> String  ) 
{
    - obj.setEncoding( cd );
    + obj.setEncoding( cd );
}

//XMLOutputter <-> XMLWriter
( res : XMLOutputter -> XMLWriter )
{
    - res = new XMLOutputter();
    + res = new XMLWriter();
}

( res : XMLOutputter -> XMLWriter, f : Format -> OutputFormat )
{
    - res = new XMLOutputter( f );
    + res = new XMLWriter( f );
}

( obj : XMLOutputter -> XMLWriter, doc : Document -> Document, os : OutputStream -> OutputStream,
    wrt : Writer -> Writer )
{
    - obj.output( doc, os | doc, wrt );
    + obj.setOutputStream(os) | obj.setWriter( wrt );
    + obj.write( doc );
}

( obj : XMLOutputter -> XMLWriter, res : String -> String, f : Format -> OutputFormat,
    ele : Element -> Element )
{
    m f = Format.getRawFormat();
    m obj = new XMLOutputter(f);
    - res = obj.outputString(ele);
    + res = ele.asXML();
}

( obj : XMLOutputter -> XMLWriter, f1 : Format -> OutputFormat, f2 : Format -> OutputFormat )
{
    - obj = new XMLOutputter( void or f1 );
    - obj.setFormat(f2);
    + obj = new XMLWriter(f2);
}
// syntax sugar: 'or' and '|'

( obj : XMLOutputter -> XMLWriter, f : Format -> OutputFormat, ele : Element -> Element,
    res : String -> String )
{
    m f = Format.getRawFormat();
    m obj.setFormat(f);
    - res = obj.outputString(ele);
    + res = obj.asXML();
}

( obj : XMLOutputter -> XMLWriter, f : Format -> OutputFormat, ele : Element -> Element,
    res : String -> String )
{
    - obj = new XMLOutputter( void or Format.getPrettyFormat() or Format.getCompactFormat() )
    - f = Format.getPrettyFormat();
    - obj.setFormat(f);
    - res = obj.outputString(ele);
    + StringWriter sw = new StringWriter();
    + obj = new XMLWriter( sw, OutputFormat.createPrettyPrint() );
    + obj.write(ele);
    + res = sw.toString();
}

( obj : XMLOutputter -> XMLWriter, f : Format -> OutputFormat, ele : Element -> Element,
    res : String -> String )
{
    - obj = new XMLOutputter( void or Format.getPrettyFormat() or Format.getCompactFormat() )
    - f = Format.getCompactFormat();
    - obj.setFormat(f);
    - res = obj.outputString(ele);
    + StringWriter sw = new StringWriter();
    + obj = new XMLWriter( sw, OutputFormat.createPrettyPrint() );
    + obj.write(ele);
    + res = sw.toString();
}

( obj : XMLOutputter -> XMLWriter, res : String -> String, ele : Element -> Element )
{
    - obj = new XMLOutputter( Format.getPrettyFormat() | Format.getCompactFormat() );
    - res = obj.outputString(ele);
    + StringWriter sw = new StringWriter();
    + obj = new XMLWriter( sw, OutputFormat.createPrettyPrint() | OutputFormat.createCompactFormat() );
    + obj.write(ele);
    + res = sw.toString();
}

//XPath:
( obj : XPath -> XPath, path : String -> String )
{
    - obj = XPath.newInstance( path );
    + obj = DocumentHelper.createXPath( path );
}

( obj : JDOMXPath -> DefaultXPath, path : String -> String )
{
    - obj = new JDOMXPath( path );
    + obj = new DefaultXPath( path );
}

( obj : XPath -> XPath, res : Object -> Object, content : Object -> Object, 
    path : String -> String )
{
    - res = obj.selectSingleNode( content | content, path );
    + res = obj.selectSingleNode( content | content, path );
}

( obj : XPath -> XPath, res : List<?> -> List<? extends Node>, content : Object -> Object,
    path : String -> String )
{
    - res = obj.selectNodes( content | content, path );
    + res = obj.selectNodes( content | content, path );
}

//Namespace:
( obj : Namespace -> Namespace, res : Namespace -> Namespace, pre : String -> String, 
    uri : String -> String )
{
    - res = obj.getNamespace( pre | pre, uri );
    + res = obj.getNamespace( pre | pre, uri );
}
